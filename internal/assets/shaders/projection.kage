//kage:unit pixels

package main

const (
	HeightFactor = 0.05
	MaxDepth     = 8.
)

func phong(lightDir, normal, clr vec3) vec3 {
	// ambient
	ambient := clr * 0.25

	// diffuse
	dotLN := clamp(dot(lightDir, normal), 0., 1.)
	diffuse := clr * dotLN

	// specular
	halfwayDir := normalize(lightDir + normal)
	specular := vec3(0.25) * pow(max(dot(normal, halfwayDir), 0.), 64.)

	return ambient + diffuse + specular
}

func gray(clr vec3) float {
	return clr.r*0.299 + clr.g*0.587 + clr.b*0.114
}

func path() vec2 {
	return vec2(
		sin((ITime+FTime)*0.5*Factor)*(2*Factor),         //*16,
		sin((ITime+FTime)*0.5*Factor+3.1415/2)*(2*Factor), //*16,
	)
}

func sdScene(p vec3) float {
	q := abs(p) - 1

	if q.x <= 0 && q.y <= 0 {
		uv := ((p.xy+1)/2)*imageSrc0Size() + imageSrc0Origin()
		clr := imageSrc0At(floor(uv)).rgb
		// Note: using luminance doesn't produce interesting results
		h := length(clr)
		h = min((exp(h)-1), 1) * HeightFactor
		d := -p.z - h

		return d
	}

	q = max(q, 0)
	return max(q.x, max(q.y, q.z-HeightFactor))
}

func rayMarch(ro, rd vec3) float {
	const (
		MaxSteps  = 64.
		Precision = 0.0005
	)

	depth := 0.
	d := 0.
	for i := 0; i < MaxSteps; i++ {
		p := ro + depth*rd
		d = sdScene(p)
		if d < Precision || depth > MaxDepth {
			break
		}
		d = min(d, 0.00075)
		depth += d
	}

	return depth
}

func calcNormal(p vec3) vec3 {
	_, size := imageDstRegionOnTexture()
	factor := 2 / size.y //0.0005
	e := vec2(1., -1.) * factor

	return normalize(sdScene(p+e.xyy)*e.xyy +
		sdScene(p+e.yyx)*e.yyx +
		sdScene(p+e.yxy)*e.yxy +
		sdScene(p+e.xxx)*e.xxx,
	)
}

var ITime float
var FTime float
var Factor float

func Fragment(dst vec4, src vec2, color vec4) vec4 {
	const pi = 3.1415

	uv := (src-imageSrc0Origin())/imageSrc0Size()*2 - 1
	ro := vec3(uv.x, uv.y, -HeightFactor)
	rd := normalize(vec3(uv*path(), 1.))
	d := rayMarch(ro, rd)
	if d > MaxDepth {
		return vec4(0, 0, 0, 1)
	}

	p := ro + rd*d
	uv = ((p.xy+1)/2)*imageSrc0Size() + imageSrc0Origin()
	clr := imageSrc0At(floor(uv)).rgb
	normal := -calcNormal(p)

	lpos := vec3(0, 0, -HeightFactor-2)
	ldir := normalize(p - lpos)
	clr = phong(ldir, normal, clr)

	return vec4(clr, 1.)
}
